cmake_minimum_required(VERSION 3.20)

project(defect_detection)

set(CMAKE_CXX_STANDARD 17)
set(DLL_NAME "FDD" CACHE STRING "export dll name")
set(FASTDEPLOY_DIR "E:/FastDeploy/build_cpu/install" CACHE PATH "fastdeploy install directory")

option(USE_SUBMODULE "use submodule" ON)
option(USE_AUTO_EXPORT "use generate_export_header" ON)

if (CMAKE_BUILD_TYPE)
    string(TOLOWER ${CMAKE_BUILD_TYPE} _type)
    if (_type STREQUAL release)
        set(COMPILATION_FLAGS "${CMAKE_CXX_FLAGS_RELEASE} -std=c++")
    elseif (_type STREQUAL debug)
        set(COMPILATION_FLAGS "${CMAKE_CXX_FLAGS_DEBUG} -std=c++")
    else ()
        set(COMPILATION_FLAGS "-std=c++")
    endif ()
else (CMAKE_BUILD_TYPE)
    set(COMPILATION_FLAGS "-std=c++")
endif (CMAKE_BUILD_TYPE)


if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    # Force MSVC to use UTF-8 because that's what we use. Otherwise it uses
    # the default of whatever Windows sets and causes encoding issues.
    message(STATUS "You are using MSVC. Forcing to use UTF-8")
    add_compile_options("$<$<C_COMPILER_ID:MSVC>:/utf-8>")
    add_compile_options("$<$<CXX_COMPILER_ID:MSVC>:/utf-8>")
endif ()
add_library(${DLL_NAME} SHARED defect_detect.h defect_detect.cpp)

include(${FASTDEPLOY_DIR}/FastDeploy.cmake)
include_directories(${FASTDEPLOY_INCS})
target_link_libraries(${DLL_NAME} ${FASTDEPLOY_LIBS})
add_executable(${PROJECT_NAME} main.cpp)
target_link_libraries(${PROJECT_NAME} ${DLL_NAME})
target_compile_definitions(${DLL_NAME} PUBLIC FDD_EXPORTS)

if (USE_SUBMODULE)
    add_subdirectory(thirdpart/jsoncpp)
    target_link_libraries(${PROJECT_NAME} jsoncpp_lib)
    add_subdirectory(thirdpart/gflags)
    target_link_libraries(${PROJECT_NAME} gflags::gflags)
else ()
    set(jsoncpp_DIR "F:/jsoncpp/build/install/lib/cmake/jsoncpp" CACHE PATH "jsoncpp cmake directory")
    set(gflags_DIR "F:/gflags/bd/install/lib/cmake/gflags" CACHE PATH "gflags cmake directory")
    find_package(jsoncpp REQUIRED)
    if (NOT jsoncpp_FOUND)
        message(FATAL_ERROR "please install jsoncpp firstly or use submodule mode")
    endif ()
    find_package(gflags REQUIRED)
    if (NOT gflags_FOUND)
        message(FATAL_ERROR "please install jsoncpp firstly use submodule mode")
    endif ()
    target_link_libraries(${PROJECT_NAME} JsonCpp::JsonCpp ${GFLAGS_LIBRARIES})
endif ()

if (USE_AUTO_EXPORT)
    add_compile_definitions(USE_AUTO_EXPORT)
    include(GenerateExportHeader)
    generate_export_header(${DLL_NAME} EXPORT_FILE_NAME ${CMAKE_SOURCE_DIR}/exports.h)
    #target_include_directories(${DLL_NAME} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>)
endif ()